generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Category {
  id            Int       @id @default(autoincrement()) @map("categoria_id")
  name          String?   @db.VarChar(20) @map("nome_categoria")
  description   String?   @db.VarChar(200) @map("descricao_categoria")
  product       Product[]

  @@map("categoria")
}

model User {
  id            Int       @id @default(autoincrement()) @map("cliente_id")
  email         String    @unique @db.VarChar(50)
  username      String    @unique @db.VarChar(15)
  password      String    @db.VarChar(72) @map("senha")
  name          String?   @db.VarChar(200) @map("nome")
  cpf           String    @unique @db.VarChar(11)
  telephone     String?   @db.VarChar(11) @map("telefone")
  birthDate     DateTime? @db.Date @map("data_nascimento")
  address       Address[]
  order         Order[]

  @@map("cliente")
}

model Address {
  id            Int         @id @default(autoincrement()) @map("endereco_id")
  postalCode    String?     @db.VarChar(9) @map("cep")
  street        String?     @db.VarChar(100) @map("rua")
  district      String?     @db.VarChar(30) @map("bairro")
  city          String?     @db.VarChar(30) @map("cidade")
  number        String?     @db.VarChar(10) @map("numero")
  complement    String?     @db.VarChar(100) @map("complemento")
  uf            String?     @db.VarChar(2)
  userId        Int         @map("cliente_id")
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("endereco")
}

model Order {
  id              Int              @id @default(autoincrement()) @map("pedido_id")
  orderNumber     Int?             @map("numero_pedido")
  totalAmount     Decimal?         @db.Decimal @map("valor_total_pedido")
  orderDate       DateTime         @default(now()) @db.Date @map("data_pedido")
  status          Boolean?
  userId          Int              @map("cliente_id")
  user            User         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orderProduct    OrderProduct[]

  @@map("pedido")
}

model Product {
  id              Int              @id @default(autoincrement()) @map("produto_id")
  name            String?          @db.VarChar(50) @map("nome_produto")
  description     String?          @db.VarChar(200) @map("descricao_produto")
  price           Decimal?         @db.Decimal @map("preco_produto")
  stockAmount     Int?             @map("qtd_estoque")
  createdAt       DateTime?        @default(now()) @db.Date @map("data_cadastro_produto")
  categoryId      Int              @map("categoria_id")
  image           String?          @db.VarChar @map("imagem")
  category        Category         @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orderProduct    OrderProduct[]

  @@map("produto")
}

model OrderProduct {
  id            Int           @id @default(autoincrement()) @map("produto_pedido_id")
  quantity      Int?          @map("qtd_produto_pedido")
  productId     Int?          @map("produto_id")
  orderId       Int?          @map("pedido_id")
  order         Order?        @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  produto       Product?      @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("produto_pedido")
}
